# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PkJ1AYRiCoNlnEIpTARLsMDteyj0Z0mN

RestAPI
"""

from fastapi import FastAPI, File, UploadFile
from torchvision import transforms
from PIL import Image
import torch
import timm
import io

app = FastAPI()

# Daftar nama jamur yang sesuai dengan kelas yang digunakan dalam training
mushroom_classes = ["Amanita phalloides (Death Cap)",
                    "Amanita virosa (Destroying Angels)",
                    "Auricularia auricula (Kuping)",
                    "Flammulina filiformis (Enoki)",
                    "Galerina marginata (Autumn Skullcap)",
                    "Grifola frondosa (Maitake)",
                    "Gyromitra esculenta (False Morel)",
                    "Lentinula edodes (Shitake)",
                    "Tuber melanosporum (truffle)"]  # Sesuaikan dengan datasetmu

# Load model dari file .pth
model_path = "saved_models/mushrooms_best_model.pth"
model = timm.create_model("rexnet_150", pretrained=False, num_classes=len(mushroom_classes))
model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')))
model.eval()

# Preprocessing untuk gambar input (sesuaikan dengan yang digunakan selama training)
mean, std, im_size = [0.485, 0.456, 0.406], [0.229, 0.224, 0.225], 224
preprocess = transforms.Compose([
    transforms.Resize((im_size, im_size)),
    transforms.ToTensor(),
    transforms.Normalize(mean=mean, std=std)
])


# Fungsi untuk melakukan prediksi gambar jamur dengan threshold
def predict_mushroom(image: Image.Image, threshold: float = 0.5):
    image_tensor = preprocess(image).unsqueeze(0)  # Tambah batch size = 1
    with torch.no_grad():
        outputs = model(image_tensor)
        probabilities = torch.nn.functional.softmax(outputs, dim=1)  # Convert logits to probabilities
        max_prob, predicted = torch.max(probabilities, 1)

        # Debugging: print output probabilities and max probability
        print(f"Predicted probabilities: {probabilities}")
        print(f"Max probability: {max_prob.item()}")

        # Check if the max probability is below the threshold
        if max_prob.item() < threshold:
            return "This is not a mushroom or it's an unknown type."

        return mushroom_classes[predicted.item()]


# Endpoint untuk upload gambar dan memberikan nama jamur
@app.post("/predict/")
async def predict(file: UploadFile = File(...)):
    # Baca dan proses gambar yang di-upload
    image = Image.open(io.BytesIO(await file.read())).convert("RGB")

    # Predict the mushroom and check confidence
    mushroom_name = predict_mushroom(image, threshold=0.5)  # Set threshold for low-confidence predictions
    return {"mushroom_name": mushroom_name}


if _name_ == "_main_":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)